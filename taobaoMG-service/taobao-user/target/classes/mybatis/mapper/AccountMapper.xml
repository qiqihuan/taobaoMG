<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.huanjava.taobao.user.mapper.AccountMapper">
    <resultMap id="BaseResultMap" type="Account">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="login_name" jdbcType="VARCHAR" property="loginName"/>
        <result column="password" jdbcType="CHAR" property="password"/>
        <result column="nick_name" jdbcType="VARCHAR" property="nickName"/>
        <result column="age" jdbcType="SMALLINT" property="age"/>
        <result column="location" jdbcType="VARCHAR" property="location"/>
        <result column="role" jdbcType="VARCHAR" property="role"/>
    </resultMap>

    <!-- 自定的结果集，包含了一对多的关系，里面包含两个集合 roleList permissionList-->
    <resultMap id="selectByPermissionResultMap" type="Account">
        <id column="ac_id" jdbcType="INTEGER" property="id"/>
        <result column="login_name" jdbcType="VARCHAR" property="loginName"/>
        <result column="password" jdbcType="CHAR" property="password"/>
        <result column="nick_name" jdbcType="VARCHAR" property="nickName"/>
        <result column="age" jdbcType="SMALLINT" property="age"/>
        <result column="location" jdbcType="VARCHAR" property="location"/>
        <result column="role" jdbcType="VARCHAR" property="role"/>

        <collection property="roleList" ofType="Role">
            <id column="ro_id" jdbcType="INTEGER" property="id"/>
            <result column="ro_name" jdbcType="CHAR" property="name"/>
        </collection>
        <collection property="permissionList" ofType="Permission">
            <id column="pe_id" jdbcType="INTEGER" property="id"/>
            <result column="uri" jdbcType="VARCHAR" property="uri"/>
            <result column="pe_name" jdbcType="VARCHAR" property="name"/>
            <result column="create" jdbcType="TINYINT" property="create"/>
            <result column="retrieve" jdbcType="TINYINT" property="retrieve"/>
            <result column="update" jdbcType="TINYINT" property="update"/>
            <result column="delete" jdbcType="TINYINT" property="delete"/>
        </collection>

    </resultMap>

    <select id="findByLoginNameAndPassword" resultMap="selectByPermissionResultMap">
        select
            ac.id as ac_id,ac.login_name,ac.nick_name,ac.age,ac.location,ac.role,ro.id as ro_id,ro.name as ro_name,pe.id as pe_id,pe.uri
            ,pe.name as pe_name,pe.create,pe.retrieve,pe.update,pe.delete
         from
            account ac
        INNER JOIN
            account_role ar
        on
            ac.id = ar.account_id
        INNER JOIN
          role ro
        on
            ar.role_id = ro.id

         LEFT JOIN
            role_permission rp
        on
            ro.id = rp.role_id
        LEFT JOIN
            permission pe
        ON
            rp.permission_id = pe.id
            where login_name=#{loginName} and password=#{password}
    </select>


    <select id="selectByPermission" resultMap="selectByPermissionResultMap">
        select
            ac.id as ac_id,ac.login_name,ac.nick_name,ac.age,ac.location,ac.role,ro.id as ro_id,ro.name as ro_name,pe.id as pe_id,pe.uri
            ,pe.name as pe_name,pe.create,pe.retrieve,pe.update,pe.delete
         from
            account ac
        INNER JOIN
            account_role ar
        on
            ac.id = ar.account_id
        INNER JOIN
          role ro
        on
            ar.role_id = ro.id

         LEFT JOIN
            role_permission rp
        on
            ro.id = rp.role_id
        LEFT JOIN
            permission pe
        ON
            rp.permission_id = pe.id
  </select>


    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
    id, login_name, `password`, nick_name, age, `location`, `role`
  </sql>
    <select id="selectByExample" parameterType="com.huanjava.taobao.user.mapper.AccountExample" resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from account
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
        <if test="limit != null">
            <if test="offset != null">
                limit ${offset}, ${limit}
            </if>
            <if test="offset == null">
                limit ${limit}
            </if>
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from account
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from account
    where id = #{id,jdbcType=INTEGER}
  </delete>
    <delete id="deleteByExample" parameterType="com.huanjava.taobao.user.mapper.AccountExample">
        delete from account
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" keyColumn="id" keyProperty="id" parameterType="Account"
            useGeneratedKeys="true">
    insert into account (login_name, `password`, nick_name, 
      age, `location`, `role`
      )
    values (#{loginName,jdbcType=VARCHAR}, #{password,jdbcType=CHAR}, #{nickName,jdbcType=VARCHAR}, 
      #{age,jdbcType=SMALLINT}, #{location,jdbcType=VARCHAR}, #{role,jdbcType=VARCHAR}
      )
  </insert>
    <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="Account"
            useGeneratedKeys="true">
        insert into account
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="loginName != null">
                login_name,
            </if>
            <if test="password != null">
                `password`,
            </if>
            <if test="nickName != null">
                nick_name,
            </if>
            <if test="age != null">
                age,
            </if>
            <if test="location != null">
                `location`,
            </if>
            <if test="role != null">
                `role`,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="loginName != null">
                #{loginName,jdbcType=VARCHAR},
            </if>
            <if test="password != null">
                #{password,jdbcType=CHAR},
            </if>
            <if test="nickName != null">
                #{nickName,jdbcType=VARCHAR},
            </if>
            <if test="age != null">
                #{age,jdbcType=SMALLINT},
            </if>
            <if test="location != null">
                #{location,jdbcType=VARCHAR},
            </if>
            <if test="role != null">
                #{role,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.huanjava.taobao.user.mapper.AccountExample" resultType="java.lang.Long">
        select count(*) from account
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update account
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=INTEGER},
            </if>
            <if test="record.loginName != null">
                login_name = #{record.loginName,jdbcType=VARCHAR},
            </if>
            <if test="record.password != null">
                `password` = #{record.password,jdbcType=CHAR},
            </if>
            <if test="record.nickName != null">
                nick_name = #{record.nickName,jdbcType=VARCHAR},
            </if>
            <if test="record.age != null">
                age = #{record.age,jdbcType=SMALLINT},
            </if>
            <if test="record.location != null">
                `location` = #{record.location,jdbcType=VARCHAR},
            </if>
            <if test="record.role != null">
                `role` = #{record.role,jdbcType=VARCHAR},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update account
        set id = #{record.id,jdbcType=INTEGER},
        login_name = #{record.loginName,jdbcType=VARCHAR},
        `password` = #{record.password,jdbcType=CHAR},
        nick_name = #{record.nickName,jdbcType=VARCHAR},
        age = #{record.age,jdbcType=SMALLINT},
        `location` = #{record.location,jdbcType=VARCHAR},
        `role` = #{record.role,jdbcType=VARCHAR}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="Account">
        update account
        <set>
            <if test="loginName != null">
                login_name = #{loginName,jdbcType=VARCHAR},
            </if>
            <if test="password != null">
                `password` = #{password,jdbcType=CHAR},
            </if>
            <if test="nickName != null">
                nick_name = #{nickName,jdbcType=VARCHAR},
            </if>
            <if test="age != null">
                age = #{age,jdbcType=SMALLINT},
            </if>
            <if test="location != null">
                `location` = #{location,jdbcType=VARCHAR},
            </if>
            <if test="role != null">
                `role` = #{role,jdbcType=VARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="Account">
    update account
    set login_name = #{loginName,jdbcType=VARCHAR},
      `password` = #{password,jdbcType=CHAR},
      nick_name = #{nickName,jdbcType=VARCHAR},
      age = #{age,jdbcType=SMALLINT},
      `location` = #{location,jdbcType=VARCHAR},
      `role` = #{role,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>